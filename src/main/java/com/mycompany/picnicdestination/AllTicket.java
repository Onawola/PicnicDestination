package com.mycompany.picnicdestination;

import com.mycompany.picnicdestination.models.Ticket;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;
public class AllTicket extends javax.swing.JFrame {

    private final String DISPLAY_ALL_TICKET_SQL = "SELECT username, picnic_name, venue, price, date_of_order FROM TicketTbl";
    private final String DISPLAY_TODAY_SQL = "SELECT username, picnic_name, venue, price, date_of_order FROM TicketTbl WHERE date_of_order = (current_date)";
    private final String DISPLAY_YESTERDAY_SQL = "SELECT username, picnic_name, venue, price, date_of_order FROM TicketTbl WHERE date_of_order <= now() - INTERVAL '1 DAY'";
    private final String DISPLAY_LASTWEEK_SQL = "SELECT username, picnic_name, venue, price, date_of_order FROM TicketTbl WHERE date_of_order <= now() - INTERVAL '7 DAY'";
    private Connection ConnectionDb = null;
    private PreparedStatement PreparedStatementDb = null;
    private ResultSet ResultSetDb = null;
    private DefaultTableModel TicketModel = new DefaultTableModel();

    /**
     * Creates new form AllTicket
     */
    public AllTicket() {
        initComponents();
        constructTable();
        listData(DISPLAY_ALL_TICKET_SQL);
    }

    private void listData(String time) {
        List<Ticket> tickets = getAllExpenses(time);
        for (Ticket ticket : tickets) {
            TicketModel.addRow(new Object[]{ticket.getUsernameT(), ticket.getPicnicName(), ticket.getLocation(), ticket.getPrice(), ticket.getDate()});
        }
    }

    public List<Ticket> getAllExpenses(String time) {
        List<Ticket> tickets = new ArrayList<>();
        try {
            ConnectionDb = SingleConnection.getConnection();
            PreparedStatementDb = ConnectionDb.prepareStatement(time);
            ResultSetDb = PreparedStatementDb.executeQuery();
            while (ResultSetDb.next()) {
                String usernameT = ResultSetDb.getString("username");
                String picnic = ResultSetDb.getString("picnic_name");
                String location = ResultSetDb.getString("venue");
                double price = ResultSetDb.getDouble("price");
                Date dateOfOrder = ResultSetDb.getTimestamp("date_of_order");
                Ticket ticket = new Ticket(usernameT, picnic, location, price, dateOfOrder);
                tickets.add(ticket);
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
            // finally block used to close resources
                SingleConnection.closeStatement(PreparedStatementDb);
                SingleConnection.closeResultSet(ResultSetDb);
        }// end try
        return tickets;
    }

    private void openAddDestination() {
        setVisible(false);
        new AddDestination().setVisible(true);
    }

    private void todayList() {
        if (TicketModel.getRowCount() > 0) {
            for (int i = TicketModel.getRowCount() - 1; i > -1; i--) {
                TicketModel.removeRow(i);
            }
        }

        listData(DISPLAY_TODAY_SQL);
    }

    private void yesterdayList() {
        if (TicketModel.getRowCount() > 0) {
            for (int i = TicketModel.getRowCount() - 1; i > -1; i--) {
                TicketModel.removeRow(i);
            }
        }
        listData(DISPLAY_YESTERDAY_SQL);
    }

    private void lastWeekList() {
        if (TicketModel.getRowCount() > 0) {
            for (int i = TicketModel.getRowCount() - 1; i > -1; i--) {
                TicketModel.removeRow(i);
            }
        }
        listData(DISPLAY_LASTWEEK_SQL);

    }

    private void allList() {
        if (TicketModel.getRowCount() > 0) {
            for (int i = TicketModel.getRowCount() - 1; i > -1; i--) {
                TicketModel.removeRow(i);
            }
        }
        listData(DISPLAY_ALL_TICKET_SQL);

    }

    private void constructTable() {
        TicketModel.addColumn("Username");
        TicketModel.addColumn("Picnic Name");
        TicketModel.addColumn("Venue");
        TicketModel.addColumn("Price");
        TicketModel.addColumn("Date of Order");
                historyTable.setModel(TicketModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        historyTable = new javax.swing.JTable();
        jComboBoxTime = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("View Tickets");

        historyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(historyTable);

        jComboBoxTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Today", "Yesterday", "Last Week" }));
        jComboBoxTime.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxTimeItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxTime, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jComboBoxTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        openAddDestination();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBoxTimeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxTimeItemStateChanged
        String value = jComboBoxTime.getSelectedItem().toString();
        switch (value) {
            case "All":
                allList();
                break;
            case "Today":
                todayList();
                break;
            case "Yesterday":
                yesterdayList();
                break;
            case "Last Week":
                lastWeekList();
                break;

        }
    }//GEN-LAST:event_jComboBoxTimeItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AllTicket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AllTicket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AllTicket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AllTicket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AllTicket().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable historyTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBoxTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
